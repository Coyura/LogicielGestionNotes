import sys, json
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import pandas as pd
from math import pi

from matplotlib.path import Path
from matplotlib.spines import Spine
from matplotlib.projections.polar import PolarAxes
from matplotlib.projections import register_projection

filename = "dataNotesV2.json"

def lireJSON(filename):
    with open(filename) as json_file:
        dico = json.load(json_file)
        return dico
    return None

mesDatas = {}
mesDatas = lireJSON(filename)

# notesMatEleve = []
# matEleve = mesDatas["academies"][0]["etablissements"][0]["classes"][0]["eleves"][0]["matieres"]
# noteMatEleve = mesDatas["academies"][0]["etablissements"][0]["classes"][0]["eleves"][0]["matieres"][0]["notes"]
# print(noteMatEleve)
# print(matEleve)

# df = pd.DataFrame(mesDatas["academies"][0]["etablissements"][0]["classes"][0]["eleves"][0]["matieres"][0]["notes"])
# print (df)

# for n in noteMatEleve["notes"] :
#     noteCoef = notesMatEleve["notes"][coef]
#     moyenneEleveMat = notesMatEleve["coef"]

# A DECOMMENTER APRES
#
# matEleve = mesDatas["academies"][0]["etablissements"][0]["classes"][0]["eleves"][2]["matieres"]
# noteMatEleve = mesDatas["academies"][0]["etablissements"][0]["classes"][0]["eleves"][2]["matieres"][0]["notes"]
#
# listeMatEl = []
# listeNotesEl = []
# for m in matEleve:
#     notes=m["notes"]
#     nomMat=m["nom"]
#     sumCoef=0
#     sumNotes=0
#     for n in notes :
#         coefNote=n["coef"]
#         valeurNote=n["valeur"]
#         sumNotes = sumNotes + (coefNote*valeurNote)
#         sumCoef = sumCoef + coefNote
#         moyEleMat = sumNotes/sumCoef
#     listeNotesEl.append(moyEleMat)
#     listeMatEl.append(nomMat)
#     print(nomMat, moyEleMat)
#
# print(listeMatEl, listeNotesEl)
#
#
#
# # Calcul moyenne de la classe par matière:
# # def moyenneClasse ():
# academie = 0
# etabliss = 0
# cla = 0
# # nomMat="Physiologie"
# listeMatCla = []
# listeNotesCla = []
# nbElevMat=0
# dicoClasse = mesDatas["academies"][academie]["etablissements"][etabliss]["classes"][cla]
# for eleve in dicoClasse["eleves"]:
#     # print(eleve["nom"])
#     for matiere in eleve["matieres"]:
#         mat = "Physipathologie"
#         # print(matiere["nom"])
#         if matiere["nom"] == mat:
#             nbElevMat +=1
#             notes = matiere["notes"]
#             nomMat = matiere["nom"]
#             sumCoef = 0
#             sumNotes = 0
#             for n in notes:
#                 coefNote = n["coef"]
#                 valeurNote = n["valeur"]
#                 sumNotes = sumNotes + (coefNote * valeurNote)
#                 sumCoef = sumCoef + coefNote
#                 moyenneMat = sumNotes / sumCoef
#             # print(nomMat, moyenneMat)
#             listeNotesCla.append(moyenneMat)
#             listeMatCla.append(nomMat)
#             listUniMat = np.unique(listeMatCla)
#     moyClassMat=(sum(listeNotesCla))/nbElevMat
# print (listeMatCla, listeNotesCla)
# print (listUniMat,' : ', moyClassMat)
# print (dicoClasse)

# A DECOMMENTER JUSQU4'ICI


matEleve = mesDatas["academies"][0]["etablissements"][0]["classes"][0]["eleves"][2]["matieres"]
noteMatEleve = mesDatas["academies"][0]["etablissements"][0]["classes"][0]["eleves"][2]["matieres"][0]["notes"]

listeMatEl = []
listeNotesEl = []
# dfMoyEl=pd.DataFrame({'Nom' : ['Elève', 'Classe'], ''})
dfra ={'Nom': ['Eleve', 'Classe']}
for m in matEleve:
    notes=m["notes"]
    nomMat=m["nom"]
    sumCoef=0
    sumNotes=0
    for n in notes :
        coefNote=n["coef"]
        valeurNote=n["valeur"]
        sumNotes = sumNotes + (coefNote*valeurNote)
        sumCoef = sumCoef + coefNote
        moyEleMat = sumNotes/sumCoef
    listeNotesEl.append(moyEleMat)
    listeMatEl.append(nomMat)
    # totMoy.append(nomMat : [moyenneMat])
    # print(nomMat, moyEleMat)
    dicoClasse = mesDatas["academies"][0]["etablissements"][0]["classes"][0]
    listeMatCla = []
    listeNotesCla = []
    listMatUniqCla=[]
    nbElevMat=0
    for eleve in dicoClasse["eleves"]:
        # print(eleve["nom"])
        for matiere in eleve["matieres"]:
            mat = nomMat
            # print(matiere["nom"])
            if matiere["nom"] == mat:
                nbElevMat += 1
                notes = matiere["notes"]
                nomMat = matiere["nom"]
                sumCoef = 0
                sumNotes = 0
                for n in notes:
                    coefNote = n["coef"]
                    valeurNote = n["valeur"]
                    sumNotes = sumNotes + (coefNote * valeurNote)
                    sumCoef = sumCoef + coefNote
                    moyenneMat = sumNotes / sumCoef
                # print(nomMat, moyenneMat)
                listeNotesCla.append(moyenneMat)
                listeMatCla.append(nomMat)
                listUniMat = np.unique(listeMatCla)
                listMatUniqCla.append(listUniMat)
        moyClassMat = (sum(listeNotesCla)) / nbElevMat
    dfra.update({nomMat: [moyEleMat, moyClassMat]})
    testeu=str(dfra[nomMat][1])
    print("testeu :", testeu)
        # totMoyMatClass["nom"]=nomMat
    # print(listeMatCla, listeNotesCla)
    print(listUniMat, ' : ', moyClassMat)
    print (dfra)
    # print(totMoy)
    # totMoy=({'Nom' : ['Elève', 'Classe']})

# print(listeMatEl, listeNotesEl)

df=pd.DataFrame(dfra)



#Fabrication du radar :
# df = pd.DataFrame({
#     'Nom': ['Eleve', 'Classe'],
#     nomMat : [moyEleMat, moyClassMat],
#     'Physiopathologie': [12.0, 17.0],
#     'Biochimie': [14.0, 10.3]
# })
print(df)

# ------- PART 1: Create background

# number of variable
categories = list(df)[1:]
N = len(categories)

# What will be the angle of each axis in the plot? (we divide the plot / number of variable)
angles = [n / float(N) * 2 * pi for n in range(N)]
angles += angles[:1]

# Initialise the spider plot
ax = plt.subplot(111, polar=True)

# If you want the first axis to be on top:
ax.set_theta_offset(pi / 2)
ax.set_theta_direction(-1)

# Draw one axe per variable + add labels labels yet
plt.xticks(angles[:-1], categories)

# Draw ylabels
ax.set_rlabel_position(0)
plt.yticks([5, 10, 15, 20], ["5", "10", "15", "20"], color="grey", size=7)
plt.ylim(0, 20)

# ------- PART 2: Add plots

# Plot each individual = each line of the data
# I don't do a loop, because plotting more than 3 groups makes the chart unreadable

# Ind1
values = df.loc[0].drop('Nom').values.flatten().tolist()
values += values[:1]
ax.plot(angles, values, linewidth=1, linestyle='solid', color='blue', label="Elève")
ax.fill(angles, values, 'b', alpha=0.1)

# Ind2
values = df.loc[1].drop('Nom').values.flatten().tolist()
values += values[:1]
ax.plot(angles, values, linewidth=1, linestyle='solid', color = 'red', label="Classe")
ax.fill(angles, values, 'r', alpha=0.1)

# Add legend
plt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))

plt.show()